package monadgo

import (
	"fmt"
	"reflect"
)

// Slice represents a scala-like List.
type Slice interface {
	//Any
	Traversable

	Len() int
	Cap() int
}

type _slice struct {
	seq
}

var _ Slice = _slice{}

var sliceCBF CanBuildFrom = func(v reflect.Value) reflect.Value {
	return reflect.ValueOf(_slice{seqFromValue(v)})
}

// SliceOf ...
func SliceOf(x interface{}) Slice {
	if x == nil {
		return _slice{seqOf(nothings)}
	}

	return _slice{seqOf(x)}
}

// ----------------------------------------------------------------------------

func (s _slice) toSeq() seq {
	return s.seq
}

func (s _slice) String() string {
	return fmt.Sprintf("%v", s.Get())
}

func (s _slice) Map(f interface{}) Traversable {
	return s.seq._map(f, sliceCBF).(Traversable)
}

func (s _slice) FlatMap(f interface{}) Traversable {
	return s.seq._flatmap(f, sliceCBF).(Traversable)
}
